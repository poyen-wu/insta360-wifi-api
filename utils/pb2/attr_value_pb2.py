# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: attr_value.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'attr_value.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import tensor_pb2 as tensor__pb2
import tensor_shape_pb2 as tensor__shape__pb2
import types_pb2 as types__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10\x61ttr_value.proto\x12\x11opencv_tensorflow\x1a\x0ctensor.proto\x1a\x12tensor_shape.proto\x1a\x0btypes.proto\"\xb6\x04\n\tAttrValue\x12\x0b\n\x01s\x18\x02 \x01(\x0cH\x00\x12\x0b\n\x01i\x18\x03 \x01(\x03H\x00\x12\x0b\n\x01\x66\x18\x04 \x01(\x02H\x00\x12\x0b\n\x01\x62\x18\x05 \x01(\x08H\x00\x12+\n\x04type\x18\x06 \x01(\x0e\x32\x1b.opencv_tensorflow.DataTypeH\x00\x12\x34\n\x05shape\x18\x07 \x01(\x0b\x32#.opencv_tensorflow.TensorShapeProtoH\x00\x12\x30\n\x06tensor\x18\x08 \x01(\x0b\x32\x1e.opencv_tensorflow.TensorProtoH\x00\x12\x36\n\x04list\x18\x01 \x01(\x0b\x32&.opencv_tensorflow.AttrValue.ListValueH\x00\x12/\n\x04\x66unc\x18\n \x01(\x0b\x32\x1f.opencv_tensorflow.NameAttrListH\x00\x12\x15\n\x0bplaceholder\x18\t \x01(\tH\x00\x1a\xd6\x01\n\tListValue\x12\t\n\x01s\x18\x02 \x03(\x0c\x12\r\n\x01i\x18\x03 \x03(\x03\x42\x02\x10\x01\x12\r\n\x01\x66\x18\x04 \x03(\x02\x42\x02\x10\x01\x12\r\n\x01\x62\x18\x05 \x03(\x08\x42\x02\x10\x01\x12-\n\x04type\x18\x06 \x03(\x0e\x32\x1b.opencv_tensorflow.DataTypeB\x02\x10\x01\x12\x32\n\x05shape\x18\x07 \x03(\x0b\x32#.opencv_tensorflow.TensorShapeProto\x12.\n\x06tensor\x18\x08 \x03(\x0b\x32\x1e.opencv_tensorflow.TensorProtoB\x07\n\x05value\"\xa0\x01\n\x0cNameAttrList\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x37\n\x04\x61ttr\x18\x02 \x03(\x0b\x32).opencv_tensorflow.NameAttrList.AttrEntry\x1aI\n\tAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12+\n\x05value\x18\x02 \x01(\x0b\x32\x1c.opencv_tensorflow.AttrValue:\x02\x38\x01\x42\x30\n\x18org.tensorflow.frameworkB\x0f\x41ttrValueProtosP\x01\xf8\x01\x01\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'attr_value_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\030org.tensorflow.frameworkB\017AttrValueProtosP\001\370\001\001'
  _globals['_ATTRVALUE_LISTVALUE'].fields_by_name['i']._loaded_options = None
  _globals['_ATTRVALUE_LISTVALUE'].fields_by_name['i']._serialized_options = b'\020\001'
  _globals['_ATTRVALUE_LISTVALUE'].fields_by_name['f']._loaded_options = None
  _globals['_ATTRVALUE_LISTVALUE'].fields_by_name['f']._serialized_options = b'\020\001'
  _globals['_ATTRVALUE_LISTVALUE'].fields_by_name['b']._loaded_options = None
  _globals['_ATTRVALUE_LISTVALUE'].fields_by_name['b']._serialized_options = b'\020\001'
  _globals['_ATTRVALUE_LISTVALUE'].fields_by_name['type']._loaded_options = None
  _globals['_ATTRVALUE_LISTVALUE'].fields_by_name['type']._serialized_options = b'\020\001'
  _globals['_NAMEATTRLIST_ATTRENTRY']._loaded_options = None
  _globals['_NAMEATTRLIST_ATTRENTRY']._serialized_options = b'8\001'
  _globals['_ATTRVALUE']._serialized_start=87
  _globals['_ATTRVALUE']._serialized_end=653
  _globals['_ATTRVALUE_LISTVALUE']._serialized_start=430
  _globals['_ATTRVALUE_LISTVALUE']._serialized_end=644
  _globals['_NAMEATTRLIST']._serialized_start=656
  _globals['_NAMEATTRLIST']._serialized_end=816
  _globals['_NAMEATTRLIST_ATTRENTRY']._serialized_start=743
  _globals['_NAMEATTRLIST_ATTRENTRY']._serialized_end=816
# @@protoc_insertion_point(module_scope)
